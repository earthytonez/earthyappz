import * as Tone from "tone";
import { action, autorun, observable, makeObservable } from "mobx";

import RootStore from "./Root.store";

import { info } from "../Util/logger";
import { BeatMarker } from "./MusicFeatures/BeatMarker";

import MusicChordParameter from "./Parameter/MusicChordParameter";
import MusicScaleParameter from "./Parameter/MusicScaleParameter";
import MusicKeyParameter from "./Parameter/MusicKeyParameter";
import MusicProgressionParameter from "./Parameter/MusicProgressionParameter";
import NumericParameter from "./Parameter/NumericParameter";

export default class MusicFeaturesStore {
  musicChord: MusicChordParameter;

  musicKey: MusicKeyParameter;
  // musicChord: IMusicChord = ChordType.get("major");
  musicScale: MusicScaleParameter;
  musicChordProgression: MusicProgressionParameter;

  musicSectionLength: NumericParameter;

  tempo: NumericParameter; // in bpm
  play: boolean = false;
  beatMarker: BeatMarker = new BeatMarker(1);

  greaterMusicSectionLength(): number {
    return this.musicSectionLength.greaterValue();
  }

  changeFeatures() {
    if (this.beatMarker.num % this.greaterMusicSectionLength() === 0) {
      info("MUSIC_FEATURES", "Changing Features!");
      this.musicKey.swapOnDeck();
      this.musicScale.swapOnDeck();
      this.musicChord.swapOnDeck();
      this.musicChordProgression.swapOnDeck();
      this.musicSectionLength.swapOnDeck();
      this.tempo.swapOnDeck();
    }
  }

  incrementBeatNumber() {
    this.beatMarker.increment();
  }

  setPlay(newValue: boolean) {
    if (newValue === true) {
      info("MUSIC_FEATURES", "Stopping Tone.Transport");
      Tone.start();
      Tone.Transport.start();
      Tone.context.resume();
    } else {
      info("MUSIC_FEATURES", "Starting Tone.Transport");
      Tone.Transport.stop();
    }
    this.play = newValue;
  }

  playPause() {
    this.setPlay(!this.play);
  }

  decrementTempo() {
    this.tempo.decrement();
    Tone.Transport.bpm.value = this.tempo.val;
  }

  incrementTempo() {
    this.tempo.increment();
    Tone.Transport.bpm.value = this.tempo.val;
  }

  setTempo(tempo: number) {
    this.tempo.setValue(tempo);
    Tone.Transport.bpm.value = this.tempo.val;
  }

  /*
   * Comes in as a string because this is generated by a HTML select element:
   * event.target.value
   */
  setKey(key: string) {
    this.musicKey.setOnDeckValue(key);
  }

  /*
   * Comes in as a string because this is generated by a HTML select element:
   * event.target.value
   */
  setChord(chord: string) {
    this.musicChord.setValue(chord);
  }

  /*
   * Comes in as a string because this is generated by a HTML select element:
   * event.target.value
   */
  setScale(scale: string) {
    this.musicScale.setValue(scale);
  }

  setSectionLength(sectionLength: number) {
    this.musicSectionLength.setValue(sectionLength);
  }

  // load(_musicFeatures: any) {
  //   if (_musicFeatures.tempo) {
  //     this.tempo = _musicFeatures.tempo;
  //   }

  //   if (_musicFeatures.beatMarker) {
  //     this.beatMarker = new BeatMarker(_musicFeatures.beatMarker);
  //   }
  //   if (_musicFeatures.musicKey) {
  //     this.musicKey = _musicFeatures.musicKey;
  //   }
  //   if (_musicFeatures.musicScale) {
  //     console.log(_musicFeatures);
  //     if (typeof _musicFeatures.musicScale === "string") {
  //       this.musicScale.setValue(
  //         (_musicFeatures.musicScale as string).toLowerCase()
  //       );
  //     } else {
  //       this.musicScale = ScaleType.get("major");
  //     }
  //   }

  //   if (_musicFeatures.musicChord) {
  //     console.log(_musicFeatures);
  //     if (typeof _musicFeatures.musicChord === "string") {
  //       this.musicChord.setValue(
  //         ChordType.get((_musicFeatures.musicChord as string).toLowerCase())
  //       );
  //     } else {
  //       this.musicChord.setValue(ChordType.get("major"));
  //     }
  //   }
  // }

  constructor(private rootStore: RootStore, audioContext: Tone.BaseContext) {
    this.musicChord = new MusicChordParameter({
      name: "Chord",
      key: "global.musicChord",
      userParameterStore: this.rootStore.userParameterStore,
      default: "major",
      description:
        "The chord to use for sequencers that involve chords, like apreggiators.",
    });

    this.musicKey = new MusicKeyParameter({
      name: "Key",
      key: "global.musicKey",
      userParameterStore: this.rootStore.userParameterStore,
      default: "C",
      description: "The global key that the song will play in.",
    });

    this.musicScale = new MusicScaleParameter({
      name: "Scale",
      key: "global.musicScale",
      userParameterStore: this.rootStore.userParameterStore,
      default: "major",
      description:
        "The global scale that the song will play in, for sequencers that focus on scales.",
    });

    this.musicSectionLength = new NumericParameter({
      name: "Music Section Length",
      key: "global.music_section_length",
      userParameterStore: this.rootStore.userParameterStore,
      default: 64,
      changedAtSection: true,
      min: 0,
      max: 2048,
      description:
        "Certain parameters will only change at the interval between music sections, say every 16 bars.",
    });

    this.tempo = new NumericParameter({
      name: "Tempo",
      key: "global.tempo",
      userParameterStore: this.rootStore.userParameterStore,
      default: 120,
      changedAtSection: true,
      min: 0,
      max: 999,
      description: "Global Tempo in BPM",
    });

    this.musicChordProgression = new MusicProgressionParameter({
      name: "Chord Progression",
      key: "global.chord_progression",
      userParameterStore: this.rootStore.userParameterStore,
      default: "I",
      changedAtSection: true,
      description:
        "A Global chord progression used in sequencers that involve chord progressions.",
    });

    Tone.setContext(audioContext);

    // let musicFeaturesRaw: null | string = localStorage.getItem("musicFeatures");
    // if (musicFeaturesRaw) {
    //   let _musicFeatures = JSON.parse(musicFeaturesRaw);
    //   this.load(_musicFeatures);
    // }

    autorun(() => {
      localStorage.setItem(
        "musicFeatures",
        JSON.stringify({
          beatMarker: this.beatMarker.num,
          tempo: this.tempo,
          musicKey: this.musicKey,
          musicScale: this.musicScale.name,
          musicChord: this.musicChord.name,
        })
      );
    });

    makeObservable(this, {
      musicKey: observable,
      musicScale: observable,
      play: observable,
      beatMarker: observable,
      tempo: observable,
      playPause: action.bound,
      setPlay: action.bound,
      setKey: action.bound,
      setChord: action.bound,
      setTempo: action.bound,
      setSectionLength: action.bound,
      setScale: action.bound,
      incrementBeatNumber: action.bound,
      changeFeatures: action.bound,
    });
  }
}
